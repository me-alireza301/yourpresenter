<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.google.code.yourpresenter</groupId>
	<artifactId>yourpresenter</artifactId>
	<packaging>war</packaging>
	<name>Yourpresenter: remote presentation software</name>
	<version>0.1-SNAPSHOT</version>
	<properties>
		<org.springframework-version>3.1.0.RELEASE</org.springframework-version>
		<org.slf4j-version>1.5.10</org.slf4j-version>
		<org.hsqldb-version>2.2.6</org.hsqldb-version>
		<!-- <org.springframework.security-version>3.0.2.RELEASE</org.springframework.security-version> -->
		<!-- <jsf-version>2.0.3</jsf-version> -->
		<org.richfaces.bom.version>4.1.0.Final</org.richfaces.bom.version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>

	<dependencyManagement>
		<dependencies>
			<!-- richfaces -->
			<dependency>
				<groupId>org.richfaces</groupId>
				<artifactId>richfaces-bom</artifactId>
				<version>${org.richfaces.bom.version}</version>
				<scope>import</scope>
				<type>pom</type>
			</dependency>
		</dependencies>
	</dependencyManagement>
	<dependencies>
		<!-- Spring -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${org.springframework-version}</version>
			<exclusions>
				<!-- Exclude Commons Logging in favor of SLF4j -->
				<exclusion>
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- needed since spring 3.1 as it's optional dependency, but required tx:annotation-driven xml config -->
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjweaver</artifactId>
			<version>1.6.10</version>
			<scope>compile</scope>
		</dependency>

		<!-- logging -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
			<version>1.5.8</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>1.5.8</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>1.5.8</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.14</version>
			<scope>runtime</scope>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>${org.springframework-version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-orm</artifactId>
			<version>${org.springframework-version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${org.springframework-version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-web</artifactId>
			<version>${org.springframework-version}</version>
			<exclusions>
				<!-- Exclude Commons Logging in favor of SLF4j -->
				<exclusion>
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-config</artifactId>
			<version>${org.springframework-version}</version>
			<exclusions>
				<!-- Exclude Commons Logging in favor of SLF4j -->
				<exclusion>
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aop</artifactId>
			<version>${org.springframework-version}</version>
			<exclusions>
				<!-- Exclude Commons Logging in favor of SLF4j -->
				<exclusion>
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<!-- Database, JPA -->
		<dependency>
			<groupId>org.hsqldb</groupId>
			<artifactId>hsqldb</artifactId>
			<version>${org.hsqldb-version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-entitymanager</artifactId>
			<version>3.6.7.Final</version>
			<exclusions>
				<!-- don't depend upon old - 3.1 version -->
				<exclusion>
					<groupId>commons-collections</groupId>
					<artifactId>commons-collections</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>commons-collections</groupId>
			<artifactId>commons-collections</artifactId>
			<version>3.2.1</version>
		</dependency>

		<!-- JSF: Mojarra, PrimeFaces -->
		<dependency>
			<groupId>com.sun.faces</groupId>
			<artifactId>jsf-api</artifactId>
			<!-- version defined by richfaces already -->
			<!-- <version>${jsf-version}</version> -->
		</dependency>
		<dependency>
			<groupId>com.sun.faces</groupId>
			<artifactId>jsf-impl</artifactId>
			<!-- version defined by richfaces already -->
			<!-- <version>${jsf-version}</version> -->
		</dependency>

		<!-- richfaces related -->
		<dependency>
			<groupId>org.richfaces.ui</groupId>
			<artifactId>richfaces-components-ui</artifactId>
		</dependency>
		<dependency>
			<groupId>org.richfaces.core</groupId>
			<artifactId>richfaces-core-impl</artifactId>
		</dependency>

		<!-- Logging -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${org.slf4j-version}</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
			<version>${org.slf4j-version}</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>${org.slf4j-version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.15</version>
			<exclusions>
				<exclusion>
					<groupId>javax.mail</groupId>
					<artifactId>mail</artifactId>
				</exclusion>
				<exclusion>
					<groupId>javax.jms</groupId>
					<artifactId>jms</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.sun.jdmk</groupId>
					<artifactId>jmxtools</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.sun.jmx</groupId>
					<artifactId>jmxri</artifactId>
				</exclusion>
			</exclusions>
			<scope>runtime</scope>
		</dependency>
		<!-- Servlet -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<version>2.5</version>
			<scope>provided</scope>
		</dependency>
		<!-- JSR 303 with Hibernate Validator -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator</artifactId>
			<version>4.0.2.GA</version>
		</dependency>
		<!-- JAXB is needed when running on Java 5. In this environment these dependencies 
			have to be added (unless xml configuration is explicitly disabled via Configuration.ignoreXmlConfiguration) 
			On Java 6 jaxb is part of the runtime environment. -->
		<dependency>
			<groupId>javax.xml.bind</groupId>
			<artifactId>jaxb-api</artifactId>
			<version>2.1</version>
		</dependency>
		<!-- Test -->
		<dependency>
			<groupId>org.easymock</groupId>
			<artifactId>easymock</artifactId>
			<version>2.5.2</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.10</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>${org.springframework-version}</version>
			<scope>test</scope>
		</dependency>

		<!-- directory watch (if ported to java 7 => it's not necessary) -->
		<dependency>
			<groupId>jpathwatch</groupId>
			<artifactId>jpathwatch</artifactId>
			<version>0.94</version>
		</dependency>

		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-vfs2</artifactId>
			<version>2.0</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.0.1</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>

		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.0.1</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>

		<!-- for thumbnails generation -->
		<dependency>
			<groupId>com.google.code.thumbnailator</groupId>
			<artifactId>thumbnailator</artifactId>
			<version>0.3.10</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>

		<!-- caching, for usage see: http://code.google.com/p/ehcache-spring-annotations/ 
			http://code.google.com/p/ehcache-spring-annotations/wiki/UsingCacheable -->
		<dependency>
			<groupId>com.googlecode.ehcache-spring-annotations</groupId>
			<artifactId>ehcache-spring-annotations</artifactId>
			<version>1.2.0</version>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>

		<!-- <dependency> <groupId>javax.inject</groupId> <artifactId>javax.inject</artifactId> 
			<version>1</version> <type>jar</type> <scope>compile</scope> </dependency> -->

		<!-- we need to use cglib to enable proxies taking annotations of the interface, 
			see: http://forum.springsource.org/showthread.php?67002-Proxy-not-taking-over-annotations-of-interface -->
		<dependency>
			<groupId>cglib</groupId>
			<artifactId>cglib</artifactId>
			<version>2.2.2</version>
			<type>jar</type>
			<scope>runtime</scope>
		</dependency>

		<!-- for JSON serialization for js client communication -->
		<!-- see: http://stackoverflow.com/questions/2259551/spring-3-0-making-json-response-using-jackson-message-converter -->
		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-mapper-asl</artifactId>
			<version>1.9.1</version>
		</dependency>

		<!-- for running selenium tests -->
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-java</artifactId>
			<version>2.15.0</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<repositories>
		<!-- Maven Central -->
		<repository>
			<id>org.maven.central</id>
			<name>Maven Central Repository</name>
			<url>http://repo1.maven.org/maven2</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
		<!-- For testing against latest Spring snapshots -->
		<repository>
			<id>org.springframework.maven.snapshot</id>
			<name>Spring Maven Snapshot Repository</name>
			<url>http://maven.springframework.org/snapshot</url>
			<releases>
				<enabled>false</enabled>
			</releases>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>
		<!-- For developing against latest Spring milestones -->
		<repository>
			<id>org.springframework.maven.milestone</id>
			<name>Spring Maven Milestone Repository</name>
			<url>http://maven.springframework.org/milestone</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
		<!-- For Mojarra 2.x -->
		<repository>
			<id>java.net.release</id>
			<name>Repository for Projects On Hosted on java.net</name>
			<url>http://download.java.net/maven/2</url>
		</repository>
		<!-- PrimeFaces -->
		<!-- <repository> <id>primefaces</id> <name>Prime Technology Maven Repository</name> 
			<url>http://repository.prime.com.tr</url> <layout>default</layout> </repository> -->

		<repository>
			<id>jboss-public-repository-group</id>
			<name>JBoss Public Maven Repository Group</name>
			<url>https://repository.jboss.org/nexus/content/groups/public-jboss/</url>
			<layout>default</layout>
			<releases>
				<enabled>true</enabled>
				<updatePolicy>never</updatePolicy>
			</releases>
		</repository>

		<!-- 3rd party repo (for all the stuff that's not available anywhere outside) -->
		<repository>
			<id>thirdparty-internal</id>
			<name>Internal thirdparty repo for dependencies not available elsewhere</name>
			<url>http://yourpresenter.googlecode.com/git/yourpresenter/src/main/maven_repo</url>
		</repository>
	</repositories>

	<profiles>
		<profile>
			<id>dev</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<properties>
				<catalina.home>D:/app/java/apache-tomcat-7.0.16</catalina.home>
			</properties>

			<build>
				<plugins>
					<!-- for embedded jetty deployment, run with: mvn clean jetty:run see: 
						http://maven.apache.org/plugins/maven-war-plugin/examples/rapid-testing-jetty6-plugin.html 
						for newer versions of jetty see: http://wiki.eclipse.org/Jetty/Feature/Jetty_Maven_Plugin -->
					<plugin>
						<groupId>org.mortbay.jetty</groupId>
						<artifactId>jetty-maven-plugin</artifactId>
						<configuration>
							<scanIntervalSeconds>5</scanIntervalSeconds>
							<connectors>
								<connector implementation="org.eclipse.jetty.server.nio.SelectChannelConnector">
									<port>8081</port>
									<maxIdleTime>60000</maxIdleTime>
								</connector>
							</connectors>
							<webAppConfig>
								<contextPath>/yourpresenter</contextPath>
							</webAppConfig>
						</configuration>
					</plugin>

					<!-- for already installed tomcat deployment, run with: mvn clean verify 
						cargo:undeploy cargo:deploy -->
					<plugin>
						<groupId>org.codehaus.cargo</groupId>
						<artifactId>cargo-maven2-plugin</artifactId>
						<configuration>
							<container>
								<containerId>tomcat7x</containerId>
								<!-- Type == Installed means that you want to deploy to a container 
									that's installed on your computer -->
								<type>installed</type>
								<!-- The home folder for your local Tomcat -->
								<home>D:/app/java/apache-tomcat-7.0.16</home>
							</container>

							<configuration>
								<type>existing</type>
								<home>D:/app/java/apache-tomcat-7.0.16</home>
								<properties>
									<cargo.servlet.port>8080</cargo.servlet.port>
									<cargo.rmi.port>1099</cargo.rmi.port>
									<cargo.logging>high</cargo.logging>
								</properties>
							</configuration>
							<!-- This is another one that confused me for long. Its not enough 
								to specify 'installed' in the container tag. You have to now specify another 
								configuration with type == existing and re-issue the home path -->
							<deployer>
								<!-- You have to again specify that the type for the deployer -->
								<type>installed</type>
								<deployables>
									<!-- This deployable specifies the webapp you want to deploy -->
									<deployable>
										<groupId>${project.groupId}</groupId>
										<artifactId>${project.artifactId}</artifactId>
										<type>war</type>
									</deployable>
								</deployables>
							</deployer>
						</configuration>
					</plugin>

				</plugins>
			</build>
		</profile>

		<profile>
			<id>ci-jetty</id>
			<!-- <properties>
				<database.port>8082</database.port>
				<database.name>yp</database.name>
				<database.url>jdbc:hsqldb:hsql://127.0.0.1:${database.port}/${database.name}</database.url>
			</properties> -->
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-antrun-plugin</artifactId>
						<executions>
							<!-- start hsqldb server -->
<!-- 							<execution>
								<id>start-hsqldb</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<configuration>
									<target>
										<echo message="Starting HSQLDB" />
										<java fork="true" spawn="true" dir="." classname="org.hsqldb.Server"
											classpathref="maven.test.classpath">
											<arg value="-database.0" />
											<arg value="target/data/${database.name}" />
											<arg value="-dbname.0" />
											<arg value="yp" />
											<arg value="-port" />
											<arg value="${database.port}" />
										</java>
									</target>
								</configuration>
							</execution>
 -->						</executions>
					</plugin>

					<!-- integration tests related -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
						<executions>
							<execution>
								<id>integration-test</id>
								<goals>
									<goal>integration-test</goal>
								</goals>
								<configuration>
									<includes>
										<include>**/selenium/*IT.java</include>
									</includes>
								</configuration>
							</execution>
						</executions>
					</plugin>

					<!-- container start/stop -->
					<plugin>
						<groupId>org.codehaus.cargo</groupId>
						<artifactId>cargo-maven2-plugin</artifactId>
						<executions>
							<execution>
								<id>start-container</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>start</goal>
								</goals>
							</execution>
							<execution>
								<id>stop-container</id>
								<phase>post-integration-test</phase>
								<goals>
									<goal>stop</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<container>
								<containerId>jetty7x</containerId>
								<type>embedded</type>
	<!-- 							<systemProperties>
									<database.url>${database.url}</database.url>
								</systemProperties> -->
							</container>
							<configuration>
								<properties>
									<cargo.servlet.port>8081</cargo.servlet.port>
									<cargo.logging>high</cargo.logging>
								</properties>
							</configuration>
						</configuration>
					</plugin>

					<!-- stop hsqldb -->
<!-- 					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>sql-maven-plugin</artifactId>
						<dependencies>
							<dependency>
								<groupId>org.hsqldb</groupId>
								<artifactId>hsqldb</artifactId>
								<version>${org.hsqldb-version}</version>
							</dependency>
						</dependencies>
						<configuration>
							<driver>org.hsqldb.jdbcDriver</driver>
							<url>${database.url}</url>
							<username>sa</username>
							<password></password>
						</configuration>
						<executions>
							<execution>
								<id>stop-hsqldb</id>
								<phase>post-integration-test</phase>
								<goals>
									<goal>execute</goal>
								</goals>
								<configuration>
									<autocommit>true</autocommit>
									<sqlCommand>SHUTDOWN</sqlCommand>
								</configuration>
							</execution>
						</executions>
					</plugin> -->
				</plugins>
			</build>
		</profile>
	</profiles>

	<build>
		<finalName>yourpresenter</finalName>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>1.6</source>
					<target>1.6</target>
				</configuration>
			</plugin>

			<!-- <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-eclipse-plugin</artifactId> 
				<configuration> <downloadSources>true</downloadSources> <downloadJavadocs>false</downloadJavadocs> 
				<wtpversion>2.0</wtpversion> </configuration> </plugin> -->
			<!-- unit tests related -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<!-- <configuration>
					<configuration>
						<excludes>
							<exclude>**/selenium/*.java</exclude>
						</excludes>
					</configuration>
				</configuration> -->
			</plugin>
		</plugins>

		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>2.3.2</version>
				</plugin>
				<!-- <plugin> <groupId>org.apache.maven.plugins</groupId> <artifactId>maven-eclipse-plugin</artifactId> 
					<version>2.8</version> </plugin> -->
				<plugin>
					<groupId>org.codehaus.cargo</groupId>
					<artifactId>cargo-maven2-plugin</artifactId>
					<version>1.1.1</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>2.11</version>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-failsafe-plugin</artifactId>
					<version>2.11</version>
				</plugin>
				<plugin>
					<groupId>org.mortbay.jetty</groupId>
					<artifactId>jetty-maven-plugin</artifactId>
					<version>7.5.0.RC2</version>
				</plugin>
				<plugin>
					<artifactId>maven-antrun-plugin</artifactId>
					<version>1.7</version>
				</plugin>
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>sql-maven-plugin</artifactId>
					<version>1.5</version>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>
</project>
