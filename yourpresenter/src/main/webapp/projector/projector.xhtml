<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:rich="http://richfaces.org/rich"
	xmlns:a4j="http://richfaces.org/a4j">
<f:view contentType="text/html">

	<h:head>
		<title><ui:insert name="title">Projector</ui:insert>
		</title>
		<meta content='text/html; charset=UTF-8' http-equiv='Content-Type' />

		<script type="text/javascript" src="../js/jquery-1.7.min.js"></script>
		<script type="text/javascript">
			/* 	as we don't use jQuery distributed with Richfaces => need this
				see: http://docs.jquery.com/Using_jQuery_with_Other_Libraries */
			/* jQuery.noConflict(); */
			var $ = jQuery.noConflict();
		</script>

		<script type="text/javascript">
			var preferences = new Array();
			preferences['view.font.maxsize.projector'] = <h:outputText value="#{preferencesView.viewFontMaxsizeProjector}" />;
		</script>

		<!-- <script type="text/javascript" src="../js/projector.js"></script> -->

		<!-- used to fit text size to box
		see: http://plugins.jquery.com/project/TextFill
		the call is used also for the all oncomplete for ajax events where necessary 
		-->
		<script type="text/javascript" src="../js/jquery-textfill-0.1.js"></script>

		<script type="text/javascript">
			var data;
			var state = ""
			var transitionDuration = 500;
			var fgClass = ".one-fg";
			var bgClass = ".one-bg";
			var isBlank = <h:outputText value="#{scheduleView.blank}" />;
			var isClear = <h:outputText value="#{scheduleView.clear}" />;
			var isLive = <h:outputText value="#{scheduleView.live}" />;
			var scheduleName = "<h:outputText value="#{scheduleView.scheduleName}" />";
			var txt = "";
			var bgId = -1;
			var zIdxBehindAll = 0;
			var zIdxFg = 20;
			var zIdxBg = 10;

			jQuery(document).ready(function() {
				/* call function in jQuery: http://stackoverflow.com/questions/907634/is-this-how-you-define-a-function-in-jquery */
				onStart();
			});

			function onStart() {
				setUp();
				queryData();
			}

			function setUp() {
				// handle blank/live
				if (isBlank || !isLive) {
					jQuery(".blank").show();
				} else {
					jQuery(".blank").hide();
				}

				// set fg/bg visibility
				jQuery(fgClass).show();
				jQuery(alterClass(fgClass)).hide();
				jQuery(bgClass).show();
				jQuery(alterClass(bgClass)).hide();

				// handle clear
				if (isClear) {
					jQuery(".template-fg").hide();
				} else {
					jQuery(".template-fg").show();
				}
			}

			function queryData() {
				jQuery.getJSON("../mvc/state/" + scheduleName,
						function(newData) {

							// TODO JSON comparison, see:
							// http://stackoverflow.com/questions/201183/how-do-you-determine-equality-for-two-javascript-objects
							/* alert(jQuery.JSON.encode(newData)===jQuery.JSON.encode(data)); 

							// in case nothing changed => do nothing
							if (newData == data) {
								alert("no update");
								return;
							}
							 */

							var newTxt = newData.actualSlide.verse.text;
							var newIsBlank = newData.schedule.blank;
							var newIsClear = newData.schedule.clear;
							var newIsLive = newData.schedule.live;
							var newBgId = -1;

							if (newData.actualSlide.bgImage != null) {
								newBgId = newData.actualSlide.bgImage.id
							}

							handleBlankAndLive(newIsBlank, newIsLive);
							handleClear(newIsClear);
							handleFg(newTxt, isClear);
							handleBg(newBgId);

							data = newData;
						});

				setTimeout('queryData()', 1000);
			}

			function handleBlankAndLive(newIsBlank, newIsLive) {
				// blank and live not toggled => do nothing
				if ((newIsBlank == isBlank) &amp;&amp; (newIsLive == isLive)) {
					return;
				}

				if (newIsBlank || !newIsLive) {
					jQuery(".blank").fadeIn(transitionDuration);
				} else {
					jQuery(".blank").fadeOut(transitionDuration);
				}
				
				isBlank = newIsBlank;
				isLive = newIsLive;
			}

			function handleClear(newIsClear) {
				// clear not toggled => do nothing
				if (newIsClear == isClear) {
					return;
				}

				if (newIsClear) {
					jQuery(".template-fg").fadeOut(transitionDuration);
				} else {
					jQuery(".template-fg").fadeIn(transitionDuration);
				}

				isClear = newIsClear;
			}

			function handleFg(newTxt, isClear) {
				// txt not changed => do nothing
				if (newTxt == txt) {
					return;
				}

				var newFgClass = alterClass(fgClass);

				// set new txt
				jQuery(newFgClass).css("z-index", zIdxBehindAll);
				jQuery(newFgClass).children(".jtextfill").children(
						".jtextfill-inner").html(newTxt);

				// align size only for non-empty txt
				if (newTxt != "") {
					jQuery(newFgClass).show();
					jQuery(newFgClass)
							.children(".jtextfill")
							.textfill(
									{
										maxFontPixels : preferences['view.font.maxsize.projector']
									});
				}

				//
				// hide old and show new
				//

				// hide new and move it in front
				jQuery(newFgClass).hide();
				jQuery(newFgClass).css("z-index", zIdxFg);

				// fadeout/hide causes fading in text font to be not autosized 
				// => rather move to very back 
				jQuery(fgClass).css("z-index", zIdxBehindAll);
				/* jQuery(fgClass).fadeOut(transitionDuration); */

				// if to be displayed do the effect
				if (!isClear &amp;&amp; newTxt != "") {
					jQuery(newFgClass).fadeIn(transitionDuration);
				}

				txt = newTxt;
				fgClass = newFgClass;
			}

			function handleBg(newBgId) {
				// bg not changed => do nothing
				if (newBgId == bgId) {
					return;
				}

				var newBgClass = alterClass(bgClass);

				// if new bg is empty
				if (newBgId == -1) {
					jQuery(newBgClass).css({
						"background-image" : "none"
					});
					jQuery(newBgClass).css("z-index", zIdxBg);
					jQuery(newBgClass).show();

					// hide old and show new
					jQuery(bgClass).fadeOut(transitionDuration);

					bgId = newBgId;
					bgClass = newBgClass;
				} else {
					var imgPath = "/yourpresenter/mvc/image/" + newBgId;

					jQuery(newBgClass).css({
						"background-image" : "url('" + imgPath + "')"
					});

					//
					// hide old and show new
					//
					jQuery(newBgClass).css("z-index", zIdxBg + 1);

					// hide old and show new
					jQuery(newBgClass).fadeIn(transitionDuration, function() {
						jQuery(bgClass).css("z-index", zIdxBehindAll);
						jQuery(bgClass).hide();
						jQuery(newBgClass).css("z-index", zIdxBg);

						bgId = newBgId;
						bgClass = newBgClass;
					});
				}
			}

			function alterClass(oldClass) {
				var newClass = "";
				if (oldClass.substring(0, ".one".length) === ".one") {
					newClass = oldClass.replace("one", "two");
				} else {
					newClass = oldClass.replace("two", "one");
				}
				return newClass;
			}
		</script>

		<style type="text/css">

/* fullscreen div idea found: http://stackoverflow.com/questions/2217007/how-to-make-a-div-fullscreen-and-atop-of-all-other-elements-with-jquery */
.board {
	position: absolute;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
	background-color: black;
	padding: 0pt;
	border: 0px;
	/* border: 1px; 
	border-style: solid;
	border-color: #00ff00; */
	z-index: 1;
}

.blank {
	position: absolute;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
	background-color: black;
	padding: 0pt;
	border: 0px;
	/* border: 1px; 
	border-style: solid;
	border-color: #00ff00; */
	z-index: 100;
}

.template-bg {
	position: absolute;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
	/* background-color: black; */
	padding: 0pt;
	border: 0px;
	z-index: 20;
	background-size: cover;
	background-repeat: no-repeat;
	background-position: center;
}

.template-fg {
	position: absolute;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
	background: transparent;
	padding: 0pt;
	border: 0px;
	z-index: 30;
	/* border around text needed */
	/* padding: 10%; */
	/* by default hidden */
	margin: auto;
	/* display: none; */
	display: table;
	table-layout: fixed;
}

.one-bg .one-fg .two-bg .two-fg {
	opacity: 0;
}

/* [BEGIN] slide styles */
.jtextfill {
	padding: 5%;
	/* border: 2px;
	border-style: solid;
	border-color: #00ff00; */
	border: 0px;
	/* make background transparent */
	background: transparent;
	color: white;
	/* text with border */
	color: white;
	/* text-shadow: -2px 0 #000, 0 2px #000, 2px 0 #000, 0 -2px #000; */
	text-shadow: 2px -2px 3px #000;
	/* text-decoration: none; */
	font-family: Verdana, Helvetica, sans-serif;
	font-smooth: always;
	/* wrap text on explicit line breaks only */
	white-space: nowrap;
	text-align: center;
	display: table-cell;
	vertical-align: middle;
}

.jtextfill-inner { /* border: 2px;
	border-style: solid;
	border-color: #00ff00; */
	border: 0px;
}

.jtextfill-inner a { /* TODO check */
	/* prevent underlined text in slides in google chrome/safari */
	text-decoration: none
}
/* [END] slide styles */
</style>
	</h:head>
	<h:body>
		<!-- default background -->
		<div class="board"></div>

		<div class="template-bg one-bg"></div>
		<div class="template-bg two-bg"></div>

		<div class="template-fg one-fg">
			<div class="jtextfill">
				<span class="jtextfill-inner"></span>
			</div>
		</div>

		<div class="template-fg two-fg">
			<div class="jtextfill">
				<span class="jtextfill-inner"></span>
			</div>
		</div>

		<div class="blank"></div>
	</h:body>
</f:view>
</html>