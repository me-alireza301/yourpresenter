<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:rich="http://richfaces.org/rich"
	xmlns:a4j="http://richfaces.org/a4j">
<f:view contentType="text/html">

	<h:head>
		<title><ui:insert name="title">Yourpresenter: Projector</ui:insert>
		</title>
		<meta content='text/html; charset=UTF-8' http-equiv='Content-Type' />
		<rich:jQuery />
	</h:head>
	<h:body>
		<h:outputStylesheet library="css" name="projector.css" />

		<!-- 	
			used to fit text size to box
			see: http://plugins.jquery.com/project/TextFill
			the call is used also for the all oncomplete for ajax events where necessary 
		-->
		<h:outputScript library="js" target="head"
			name="jquery-textfill-0.1.js" />
		<h:outputScript target="head">
			jQuery(document).ready(function() {
				jQuery('.jtextfill').textfill({
					maxFontPixels : preferences['view.font.maxsize.presenter']
				})
			});
		</h:outputScript>

		<h:outputScript target="head">
			var preferences = new Array();
			preferences['view.font.maxsize.projector'] = <h:outputText
				value="#{preferencesView.viewFontMaxsizeProjector}" />;
		</h:outputScript>

		<h:outputScript target="head">
			var data;
			var state = ""
			var transitionDuration = 500;
			var fgClass = ".one-fg";
			var bgClass = ".one-bg";
			var isBlank = <h:outputText value="#{scheduleView.blank}" />;
			var isClear = <h:outputText value="#{scheduleView.clear}" />;
			var isLive = <h:outputText value="#{scheduleView.live}" />;
			var scheduleName = "<h:outputText value="#{scheduleView.scheduleName}" />";
			var txt = "";
			var bgId = -1;
			var zIdxBehindAll = 0;
			var zIdxFg = 20;
			var zIdxBg = 10;
		
			jQuery(document).ready(function() {
				/*
				 * call function in jQuery:
				 * http://stackoverflow.com/questions/907634/is-this-how-you-define-a-function-in-jquery
				 */
				onStart();
			});
			
			function onStart() {
				setUp();
				queryData();
			}
			
			function setUp() {
				// handle blank/live
				if (isBlank || !isLive) {
					jQuery(".blank").show();
				} else {
					jQuery(".blank").hide();
				}
			
				// set fg/bg visibility
				jQuery(fgClass).show();
				jQuery(alterClass(fgClass)).hide();
				jQuery(bgClass).show();
				jQuery(alterClass(bgClass)).hide();
			
				// handle clear
				if (isClear) {
					jQuery(".template-fg").hide();
				} else {
					jQuery(".template-fg").show();
				}
			}
			
			function queryData() {
				jQuery.getJSON("../mvc/state/" + scheduleName,
						function(newData) {
			
							// TODO JSON comparison, see:
							// http://stackoverflow.com/questions/201183/how-do-you-determine-equality-for-two-javascript-objects
							/*
							 * alert(jQuery.JSON.encode(newData)===jQuery.JSON.encode(data));
							 *  // in case nothing changed => do nothing if
							 * (newData == data) { alert("no update"); return; }
							 */
			
							var newTxt = newData.actualSlide.verse.text;
							var newIsBlank = newData.schedule.blank;
							var newIsClear = newData.schedule.clear;
							var newIsLive = newData.schedule.live;
							var newBgId = -1;
			
							if (newData.actualSlide.bgImage != null) {
								newBgId = newData.actualSlide.bgImage.id
							}
			
							handleBlankAndLive(newIsBlank, newIsLive);
							handleClear(newIsClear);
							handleBg(newBgId);
							handleFg(newTxt, isClear);
			
							data = newData;
						});
			
				setTimeout('queryData()', 1000);
			}
			
			function handleBlankAndLive(newIsBlank, newIsLive) {
				// blank and live not toggled => do nothing
				if ((newIsBlank == isBlank) &amp;&amp; (newIsLive == isLive)) {
					return;
				}
			
				if (newIsBlank || !newIsLive) {
					jQuery(".blank").fadeIn(transitionDuration);
				} else {
					jQuery(".blank").fadeOut(transitionDuration);
				}
				
				isBlank = newIsBlank;
				isLive = newIsLive;
			}
			
			function handleClear(newIsClear) {
				// clear not toggled => do nothing
				if (newIsClear == isClear) {
					return;
				}
			
				if (newIsClear) {
					jQuery(".template-fg").fadeOut(transitionDuration);
				} else {
					jQuery(".template-fg").fadeIn(transitionDuration);
				}
			
				isClear = newIsClear;
			}
			
			function handleFg(newTxt, isClear) {
				// txt not changed => do nothing
				if (newTxt == txt) {
					return;
				}
			
				var newFgClass = alterClass(fgClass);
			
				// set new txt
				jQuery(newFgClass).css("z-index", zIdxBehindAll);
				jQuery(newFgClass).children(".jtextfill").children(
						".jtextfill-inner").html(newTxt);
			
				// align size only for non-empty txt
				if (newTxt != "") {
					jQuery(newFgClass).show();
					jQuery(newFgClass)
							.children(".jtextfill")
							.textfill({maxFontPixels : preferences['view.font.maxsize.projector']});
				}
			
				// hide new and move it in front
				jQuery(newFgClass)
					.hide()
					.css("z-index", zIdxFg);
			
				// old fade out + move back
				jQuery(fgClass)
					.fadeOut(transitionDuration)
					.css("z-index", zIdxBehindAll);
			
				// if to be displayed do the effect
				if (!isClear &amp;&amp; newTxt != "") {
					jQuery(newFgClass).fadeIn(transitionDuration);
				}
			
				txt = newTxt;
				fgClass = newFgClass;
			}
			
			function handleBg(newBgId) {
				// bg not changed => do nothing
				if (newBgId == bgId) {
					return;
				}
			
				var newBgClass = alterClass(bgClass);
			
				// if new bg is empty
				if (newBgId == -1) {
					jQuery(newBgClass)
						.css({"background-image" : "none"})
						.css("z-index", zIdxBg)
						.show(
							function() {
								// hide old and show new
								jQuery(bgClass).fadeOut(transitionDuration);
								
								bgId = newBgId;
								bgClass = newBgClass;
						});
				} else {
					var imgPath = "/yourpresenter/mvc/image/" + newBgId;
			
					/*
					 * preload bg image first, fade it in only afterwards see:
					 * http://stackoverflow.com/questions/5365509/calling-a-function-when-the-background-image-finishes-loading
					 */
					var img = new Image();
					img.onload = function() {
						
						//
						// hide old and show new
						//
						jQuery(newBgClass)
							.css({"background-image" : "url('" + imgPath + "')"})
							.css("z-index", zIdxBg + 1)
							.fadeIn(transitionDuration, 
								function() {
									jQuery(bgClass)
										.css("z-index", zIdxBehindAll)
										.hide(
											function() {
												jQuery(newBgClass).css("z-index", zIdxBg);
												
												bgId = newBgId;
												bgClass = newBgClass;	
										});
							});
					};
					img.src = imgPath;
				}
			}
			
			function alterClass(oldClass) {
				var newClass = "";
				if (oldClass.substring(0, ".one".length) === ".one") {
					newClass = oldClass.replace("one", "two");
				} else {
					newClass = oldClass.replace("two", "one");
				}
				return newClass;
			}
		</h:outputScript>
		
		<!-- default very background -->
		<div class="board"></div>

		<!-- backgrounds -->
		<div class="template-bg one-bg"></div>
		<div class="template-bg two-bg"></div>

		<!-- foregrounds -->
		<div class="template-fg one-fg">
			<div class="jtextfill">
				<span class="jtextfill-inner"></span>
			</div>
		</div>

		<div class="template-fg two-fg">
			<div class="jtextfill">
				<span class="jtextfill-inner"></span>
			</div>
		</div>

		<!-- curtain - for the canses of (blank || !live) -->
		<div class="blank"></div>
	</h:body>
</f:view>
</html>
